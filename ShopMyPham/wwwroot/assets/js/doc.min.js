var APP = APP || {};
(function (e) {
  'use strict';

  APP.animation = {
    delay: 100,
    itemQueue: [],
    queueTimer: null,
    $wrapper: null,
    init: function () {
      var t = this;
      t.$wrapper = e("body"), t.itemQueue = [], t.queueTimer = null, typeof delay != "undefined" && (t.delay = delay), t.itemQueue.animated_0 = [], e("body").find("#content").find(">div,>section").each(function (n) {
        e(this).attr("data-animated-id", n + 1), t.itemQueue["animated_" + (n + 1)] = [];
      }), setTimeout(function () {
        t.registerAnimation();
      }, 200);
    },
    registerAnimation: function () {
      var t = this;
      e("[data-animate]:not(.animate__animated)", t.$wrapper).waypoint(function () {
        var s,
            o,
            i = this.element ? this.element : this,
            n = e(i);
        n.is(":visible") ? (s = n.closest("[data-animated-id]"), o = "0", s.length && (o = s.data("animated-id")), t.itemQueue["animated_" + o].push(i), t.processItemQueue()) : n.addClass("animate__" + n.data("animate")).addClass("animate__animated");
      }, {
        offset: "100%",
        triggerOnce: !0
      });
    },
    processItemQueue: function () {
      var t = this;
      if (t.queueTimer) return;
      t.queueTimer = window.setInterval(function () {
        var n,
            s = !1;

        for (let e in t.itemQueue) if (t.itemQueue[e].length) {
          s = !0;
          break;
        }

        if (s) {
          for (let s in t.itemQueue) n = e(t.itemQueue[s].shift()), n.addClass("animate__" + n.data("animate")).addClass("animate__animated");

          t.processItemQueue();
        } else window.clearInterval(t.queueTimer), t.queueTimer = null;
      }, t.delay);
    }
  }, APP.animation.init();
})(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.backgroundImage = {
    init: function () {
      this.initBackgroundImage();
    },
    initBackgroundImage: function () {
      e(".bg-image:not(.lazy-bg)").each(function () {
        e(this).attr("data-bg-src") && e(this).css("background-image", 'url("' + e(this).attr("data-bg-src") + '")');
      });
    }
  }, APP.backgroundImage.init();
}(jQuery), APP = APP || {}, function () {
  'use strict';

  APP.bsScript = {
    init: function () {
      this.tooltips();
    },
    tooltips: function () {
      const e = document.querySelectorAll('[data-bs-toggle="tooltip"]'),
            t = [...e].map(e => new bootstrap.Tooltip(e));
    }
  }, APP.bsScript.init();
}(jQuery), (() => {
  'use strict';

  const e = "Copy to clipboard",
        n = ['<div class="doc-code-snippet">', '   <div class="doc-clipboard">', '      <button type="button" class="btn-clipboard">', '        <svg class="bi" width="1em" height="1em" fill="currentColor" role="img" aria-label="Copy"><use xlink:href="#clipboard"/></svg>', "      </button>", "   </div>", "</div>"].join('');
  document.querySelectorAll(".doc-example-markup").forEach(e => {
    e.closest(".doc-code-snippet") || (e.insertAdjacentHTML("beforebegin", n), e.previousElementSibling.append(e));
  });

  function s(e, t) {
    document.querySelectorAll(e).forEach(e => {
      bootstrap.Tooltip.getOrCreateInstance(e, {
        title: t
      });
    });
  }

  s(".btn-clipboard", e);
  const t = new ClipboardJS(".btn-clipboard", {
    target: e => e.closest(".doc-code-snippet").querySelector(".doc-example-markup")
  });
  t.on("success", t => {
    const n = t.trigger.querySelector(".bi").firstChild,
          o = bootstrap.Tooltip.getInstance(t.trigger),
          s = "http://www.w3.org/1999/xlink",
          i = n.getAttributeNS(s, "href"),
          a = t.trigger.title;
    o.setContent({
      '.tooltip-inner': "Copied!"
    }), t.trigger.addEventListener("hidden.bs.tooltip", () => {
      o.setContent({
        '.tooltip-inner': e
      });
    }, {
      once: !0
    }), t.clearSelection(), n.setAttributeNS(s, "href", i.replace("clipboard", "check2")), setTimeout(() => {
      n.setAttributeNS(s, "href", i), t.trigger.title = a;
    }, 2e3);
  }), t.on("error", t => {
    const s = /mac/i.test(navigator.userAgent) ? "\u2318" : "Ctrl-",
          o = `Press ${s}C to copy`,
          n = bootstrap.Tooltip.getInstance(t.trigger);
    n.setContent({
      '.tooltip-inner': o
    }), t.trigger.addEventListener("hidden.bs.tooltip", () => {
      n.setContent({
        '.tooltip-inner': e
      });
    }, {
      once: !0
    });
  });
})(), APP = APP || {}, function () {
  'use strict';

  APP.core = {
    _devices: {
      xs: 0,
      sm: "576",
      md: "768",
      lg: "992",
      xl: "1200",
      xxl: "1400"
    },
    isDeviceUp: function (e) {
      return window.matchMedia("(min-width: " + APP.core._devices[e] + "px)").matches;
    },
    isDeviceDown: function (e) {
      return window.matchMedia("(max-width: " + (APP.core._devices[e] - 1) + "px)").matches;
    }
  };
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.countdown = {
    init: function () {
      var n,
          s,
          o,
          t = e("[data-countdown]");
      if (t.length < 1) return;
      n = t.data("countdown-end"), s = new Date(n).getTime(), o = setInterval(function () {
        var n = new Date().getTime(),
            t = s - n,
            i = Math.floor(t / (1e3 * 60 * 60 * 24)),
            a = Math.floor(t % (1e3 * 60 * 60 * 24) / (1e3 * 60 * 60)),
            r = Math.floor(t % (1e3 * 60 * 60) / (1e3 * 60)),
            c = Math.floor(t % (1e3 * 60) / 1e3);
        e(".day").html(i), e(".hour").html(("0" + a).slice(-2)), e(".minute").html(("0" + r).slice(-2)), e(".second").html(("0" + c).slice(-2)), t < 0 && clearInterval(o);
      }, 1e3);
    }
  }, e(document).ready(function () {
    APP.countdown.init();
  });
}(jQuery), function (e) {
  'use strict';

  const t = "has-child-dropdown-show";
  e(document).on("show.bs.dropdown", function (n) {
    if (e(n.target).closest("#offCanvasNavBar").length === 0) return;
    e(n.target).hasClass("nav-link") || e(n.target).addClass(t);
  }), e(document).on("hide.bs.dropdown", function (n) {
    if (e(n.target).closest("#offCanvasNavBar").length === 0) return;
    e(n.target).parent().find("." + t).length && n.preventDefault(), e("#offCanvasNavBar").find("." + t).removeClass(t), e(n.target).closest(".nav-item") && !e(n.target).parent().hasClass("nav-item") && (n.clickEvent === void 0 || n.clickEvent && n.clickEvent.target === n.target) && e(n.target).addClass(t);
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.fullPageScroll = {
    $_dots: null,
    _slides: [],
    _isEnabled: !0,
    _tween: null,
    _oldSlide: 0,
    _activeSlide: 0,
    init: function () {
      if (typeof gsap == "undefined") return;
      if (!document.querySelector("body.full-page-scroll")) return;

      if (this._slides = document.querySelectorAll("[data-full-page]"), this.$_dots = e(".full-page-dots"), this.$_dots.length === 0 && (this.$_dots = e('<div class="full-page-dots"></div>'), e("body").append(this.$_dots)), this.$_dots.length) {
        for (let t = 0; t < this._slides.length; t++) {
          let n = e('<div class="full-page-dots-nav"></div>');
          n.attr("title", e(this._slides[t]).data("full-page")), n.attr("data-index", t), this.$_dots.append(n);
        }

        this.$_dots.find(".full-page-dots-nav").each(function () {
          bootstrap.Tooltip.getOrCreateInstance(this, {
            title: this.title,
            container: this.parentNode
          });
        }), this.$_dots.find(".full-page-dots-nav").on("click", function () {
          let t = e(this).attr("data-index");
          APP.fullPageScroll._isEnabled = !1, APP.fullPageScroll.gotoSlide(t);
        });
      }

      document.addEventListener("mousedown", function (e) {
        e.target === document.querySelector("html") && APP.fullPageScroll._tween && (APP.fullPageScroll._tween.pause(), APP.fullPageScroll._isEnabled = !1);
      }), document.addEventListener("mouseup", function (e) {
        e.target === document.querySelector("html") && (APP.fullPageScroll._isEnabled = !0);
      }), window.addEventListener("wheel", function (e) {
        if (APP.fullPageScroll._oldSlide = APP.fullPageScroll._activeSlide, APP.fullPageScroll._activeSlide += e.deltaY > 0 ? 1 : -1, APP.fullPageScroll._activeSlide < 0 && (APP.fullPageScroll._activeSlide = 0), APP.fullPageScroll._activeSlide > APP.fullPageScroll._slides.length && (APP.fullPageScroll._activeSlide = APP.fullPageScroll._slides.length), APP.fullPageScroll._activeSlide === APP.fullPageScroll._oldSlide) return;
        APP.fullPageScroll.gotoSlide(APP.fullPageScroll._activeSlide);
      }), window.addEventListener("scroll", function () {
        APP.fullPageScroll.calculateSlideActive();
      }), e(document).ready(function () {
        APP.fullPageScroll.calculateSlideActive();
      });
    },
    gotoSlide: function (t) {
      if (t >= APP.fullPageScroll._slides.length) return;
      e("html").css("scroll-behavior", "auto");
      let n = APP.fullPageScroll._slides[t];
      APP.fullPageScroll._tween = gsap.to(window, {
        scrollTo: {
          y: n.offsetTop,
          autoKill: !1,
          ease: "Power3.easeInOut"
        },
        duration: .85,
        onComplete: function () {
          APP.fullPageScroll._isEnabled = !0;
        }
      });
    },
    calculateSlideActive: function () {
      let t = window.scrollY,
          e = 0;

      for (let n = 0; n < APP.fullPageScroll._slides.length; n++) {
        let s = APP.fullPageScroll._slides[n].offsetTop;
        if (s - t > window.innerHeight * 2 / 3) break;
        e = n;
      }

      APP.fullPageScroll.activeDot(e);
    },
    activeDot: function (t) {
      let n = APP.fullPageScroll._slides[t];

      if (APP.fullPageScroll.$_dots.length) {
        let s = e(n).data("full-page-dots");
        APP.fullPageScroll.$_dots.removeClass("dark light"), s !== void 0 && APP.fullPageScroll.$_dots.addClass(s), APP.fullPageScroll.$_dots.find(".full-page-dots-nav").removeClass("active");
        let o = APP.fullPageScroll.$_dots.find('.full-page-dots-nav[data-index="' + t + '"]');
        o.addClass("active");
      }
    }
  }, APP.fullPageScroll.init();
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.gallery = {
    init: function () {
      this.lightGallery();
    },
    lightGallery: function () {
      e(document).on("click", "a.view-single-image", function (s) {
        s.preventDefault();
        var n = e(this),
            t = n.attr("href"),
            o = n.attr("title");
        lightGallery(this, {
          plugins: [lgThumbnail, lgZoom],
          dynamic: !0,
          hash: !1,
          dynamicEl: [{
            src: t,
            downloadUrl: t,
            thumb: t,
            subHtml: o
          }],
          index: 0
        }).openGallery();
      }), e(document).on("click", "a[data-gallery]", function (o) {
        o.preventDefault();
        var i = e(this),
            t = i.data("gallery"),
            n = [],
            s = 0,
            a = e(this).attr("href"),
            r = e(this).data("thumb-src");
        e('[data-gallery="' + t + '"]').each(function (c) {
          var t = e(this).attr("href"),
              o = e(this).data("thumb-src"),
              i = e(this).attr("title");
          o === void 0 && (o = t), t == a && o == r && (s = c), typeof i == "undefined" && (i = ''), n.push({
            src: t,
            downloadUrl: t,
            thumb: o,
            subHtml: i
          });
        }), lightGallery(this, {
          plugins: [lgThumbnail, lgZoom],
          dynamic: !0,
          hash: !1,
          galleryId: t,
          dynamicEl: n,
          thumbWidth: 80,
          index: s
        }).openGallery();
      }), e(document).on("click", "a.view-video", function (t) {
        t.preventDefault();
        var n = e(this).attr("href");
        lightGallery(this, {
          dynamic: !0,
          plugins: [lgThumbnail, lgZoom, lgVideo, lgVimeoThumbnail],
          dynamicEl: [{
            src: n,
            thumb: '',
            subHtml: ''
          }]
        }).openGallery();
      });
    }
  }, e(document).ready(function () {
    APP.gallery.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.headerSticky = {
    scroll_offset_before: 0,
    init: function () {
      this.sticky(), this.scroll(), this.resize(), this.processSticky(), this.resetHeight();
    },
    sticky: function () {
      e(".header-sticky .sticky-area").each(function () {
        var n,
            t = e(this);
        if (!t.is(":visible")) return;
        t.parent().hasClass("sticky-area-wrap") || t.wrap('<div class="sticky-area-wrap"></div>'), n = t.parent(), n.height(t.outerHeight());
      });
    },
    resize: function () {
      e(document).on("after_prevent_transition_resize", function () {
        APP.headerSticky.sticky(), APP.headerSticky.processSticky(), APP.headerSticky.resetHeight();
      });
    },
    scroll: function () {
      e(window).on("scroll", function () {
        APP.headerSticky.processSticky();
      });
    },
    processSticky: function () {
      var n = e(window).scrollTop(),
          t = e(".main-header"),
          s = !1;
      t.hasClass("navbar-dark") && (s = !0), e(".header-sticky .sticky-area").each(function () {
        if (o = e(this), !o.is(":visible")) return;
        var o,
            i = o.parent(),
            a = 0,
            c = i.offset().top,
            r = e("body").css("border-width");
        r !== '' && (a += parseInt(r)), c - a < n ? (o.css("position", "fixed"), o.css("top", a + "px"), i.addClass("sticky"), s && (t.removeClass("navbar-dark"), t.addClass("navbar-light"), t.addClass("navbar-light-sticky"))) : (t.hasClass("navbar-light-sticky") && (t.addClass("navbar-dark"), t.removeClass("navbar-light"), t.removeClass("navbar-light-sticky")), i.hasClass("sticky") && (o.css("position", '').css("top", ''), i.removeClass("sticky")));
      }), APP.headerSticky.scroll_offset_before > n ? e(".header-sticky-smart .sticky-area").each(function () {
        e(this).hasClass("header-hidden") && e(this).removeClass("header-hidden");
      }) : e(".header-sticky-smart .sticky-area").each(function () {
        var t = e(this).parent();
        t.length && APP.headerSticky.scroll_offset_before > t.offset().top + e(this).outerHeight() && !e(this).hasClass("header-hidden") && e(this).addClass("header-hidden");
      }), APP.headerSticky.scroll_offset_before = n;
    },
    resetHeight: function () {
      e(".header-sticky .sticky-area").each(function () {
        let n = e(this),
            t = n.parent(),
            s = t.hasClass("sticky");
        s && t.removeClass("sticky"), t.height(n.outerHeight()), s && t.addClass("sticky");
      });
    }
  }, APP.header = {
    init: function () {
      e(".header.disable-transition-all").removeClass("disable-transition-all");
    }
  }, e(document).ready(function () {
    APP.headerSticky.init(), APP.header.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.hightlight = {
    init: function () {
      this.initHighlight();
    },
    formatHtml: function (e) {
      var t = {
        indent: "auto",
        "indent-spaces": 2,
        wrap: 500,
        markup: !0,
        "output-xml": !1,
        "output-html": !1,
        "numeric-entities": !0,
        "quote-marks": !1,
        "quote-nbsp": !1,
        "show-body-only": !0,
        "quote-ampersand": !1,
        "break-before-br": !1,
        "uppercase-tags": !1,
        "uppercase-attributes": !1,
        "drop-font-tags": !0,
        "tidy-mark": !1,
        "show-warnings": !1,
        "show-info": !1,
        "show-errors": 0
      };
      return tidy_html5(e, t);
    },
    initHighlight: function () {
      e("code.hljs").each(function () {
        let t = e(this).data("content");

        if (t) {
          t = APP.hightlight.formatHtml(JSON.parse(t));
          let e = hljs.highlightAuto(t).value;
          this.innerHTML = e.replace(/^\s*[\r\n]/gm, "");
        }
      });
    }
  }, APP.hightlight.init();
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.isotopeFilter = {
    init: function () {
      this.setupIsotope(), this.setupIsotopeFilter();
    },
    setupIsotope: function () {
      e("[data-options-isotope]").each(function () {
        var t = e(this).data("options-isotope"),
            n = {},
            t = e.extend({}, n, t);
        e(this).isotope(t);
      });
    },
    setupIsotopeFilter: function () {
      e("[data-isotope-filter]").on("click", function () {
        var t = e(this),
            n = e(t.data("isotope-target")),
            s = t.closest("[data-isotope-filter-parent]"),
            o = t.data("isotope-filter");
        n.isotope({
          filter: o
        }), s.find("[data-isotope-filter]").removeClass("active"), t.addClass("active");
      });
    }
  }, e(document).ready(function () {
    APP.isotopeFilter.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.lazyLoad = {
    instanceImage: null,
    instanceBackground: null,
    init: function () {
      if (typeof LazyLoad == "undefined") return;
      var e = this;
      this.handleLazyImages(), this.handleLazyBackgrounds(), setTimeout(function () {
        e.update();
      }, 1e3);
    },
    handleLazyImages: function () {
      this.instanceImage = new LazyLoad({
        elements_selector: ".lazy-image",
        use_native: !0,
        callback_loaded: function (t) {
          e(t).removeClass("lazy-image");
        },
        callback_error: function () {}
      });
    },
    handleLazyBackgrounds: function () {
      this.instanceBackground = new LazyLoad({
        elements_selector: ".lazy-bg",
        data_bg: "bg-src",
        callback_loaded: function (t) {
          e(t).removeClass("lazy-bg"), e(t).find(".placeholder").remove();
        }
      });
    },
    update: function () {
      e(".lazy-image").each(function () {
        var t = e(this).closest(".lazy-image").parent();
      }), this.instanceImage !== null && this.instanceImage.update(), this.instanceBackground !== null && this.instanceBackground.update();
    }
  }, e(document).ready(function () {
    APP.lazyLoad.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.parallaxLayer = {
    init: function () {
      if (typeof gsap == "undefined") return;
      e(".parallax-layers").on("mousemove", function (t) {
        t.preventDefault();
        let s = e(this),
            n = e(window),
            o = n.width(),
            i = n.height(),
            a = t.pageX - this.offsetLeft,
            r = t.pageY - this.offsetTop,
            c = a - o / 2,
            l = r - i / 2;
        s.find(".layer").each(function (t, n) {
          var e = .02 + t / 100;
          gsap.to(n, {
            duration: 1,
            x: 1 - c * e,
            y: 1 - l * e
          });
        });
      }).on("mouseleave", function (t) {
        t.preventDefault();
        let n = e(this);
        n.find(".layer").each(function (e, t) {
          let n = .01 + e / 100;
          gsap.to(t, {
            duration: 1,
            x: 0,
            y: 0
          });
        });
      });
    }
  }, APP.parallaxLayer.init();
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.preventTransitionResize = {
    resizeTimer: null,
    beforeWindowWidth: 0,
    init: function () {
      this.beforeWindowWidth = window.outerWidth, this.resize();
    },
    resize: function () {
      e(window).resize(function () {
        let t = window.outerWidth;
        if (t === APP.preventTransitionResize.beforeWindowWidth) return;
        APP.preventTransitionResize.beforeWindowWidth = t, clearTimeout(APP.preventTransitionResize.resizeTimer), e("body").addClass("disable-transition-all"), e(document).trigger("after_prevent_transition_resize"), APP.preventTransitionResize.resizeTimer = setTimeout(function () {
          e("body").removeClass("disable-transition-all");
        }, 400);
      });
    }
  }, e(document).ready(function () {
    APP.preventTransitionResize.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.slickSlider = {
    init: function () {
      this.slickSetup(), this.animateSlider();
    },
    slickSetup: function (n) {
      n !== void 0 ? t = n : t = e(".slick-slider");
      var t,
          s = {
        slidesToScroll: 1,
        slidesToShow: 1,
        adaptiveHeight: !0,
        arrows: !0,
        dots: !0,
        autoplay: !1,
        autoplaySpeed: 3e3,
        centerMode: !1,
        centerPadding: "50px",
        draggable: !0,
        fade: !1,
        focusOnSelect: !1,
        infinite: !1,
        pauseOnHover: !1,
        responsive: [],
        rtl: !1,
        speed: 300,
        vertical: !1,
        prevArrow: '<div class="slick-prev" aria-label="Previous"><svg class="icon"><use xlink:href="#icon-chevron-left"></use></svg></div>',
        nextArrow: '<div class="slick-next" aria-label="Next"><svg class="icon"><use xlink:href="#icon-chevron-right"></use></svg></div>',
        customPaging: function () {
          return e("<span></span>");
        }
      };
      t.each(function () {
        var t,
            n = e(this);
        n.hasClass("slick-initialized") || (t = n.data("slick-options"), typeof t.appendArrow != "undefined" && (t.appendArrows = e(t.appendArrow)), n.hasClass("custom-arrows-02") && (t.prevArrow = e(".custom-arrows-02-prev"), t.nextArrow = e(".custom-arrows-02-next")), t = e.extend({}, s, t), n.slick(t), n.on("setPosition", function (o, t) {
          var s = 0;
          t.$slides.each(function () {
            var n = e(this);
            n.hasClass("slick-active") && t.options.adaptiveHeight && t.options.slidesToShow > 1 && t.options.vertical === !1 && s < n.outerHeight() && (s = n.outerHeight());
          }), s !== 0 && n.find("> .slick-list").animate({
            height: s
          }, 500);
        }));
      });
    },
    animateSlider: function () {
      var t = e(".slick-slider");
      t.on("beforeChange", function () {
        var s = e(this).find(".slick-slide:not(.slick-active)"),
            n = s.find(".animate__animated"),
            t = '';
        if (n.length <= 0) return;
        n.each(function () {
          t = e(this).attr("data-animate"), t.length && e(this).removeClass("animate__animated").removeClass("animate__" + t);
        });
      }), t.on("afterChange", function () {
        var s = e(this).find(".slick-active"),
            n = s.find("[data-animate]:not(.animate__animated)"),
            t = '';
        if (APP.lazyLoad && APP.lazyLoad.update(), n.length <= 0) return;
        n.each(function () {
          t = e(this).attr("data-animate"), t.length && e(this).addClass("animate__animated").addClass("animate__" + t);
        });
      });
    }
  }, e(document).ready(function () {
    APP.slickSlider.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.styleInline = {
    init: function () {
      this.initCss();
    },
    initCss: function () {
      e("[data-styles]").each(function () {
        if (this.dataset.styles) {
          let n = this.dataset.styles.split(";");

          for (var t in n) {
            let s = n[t].split(":");
            s.length === 2 && e(this).css(s[0].trim(), s[1].trim());
          }
        }
      });
    }
  }, APP.styleInline.init();
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.tabs = {
    init: function () {
      this.tab_accordion(), this.tab_dropdown();
    },
    tab_accordion: function () {
      e('[data-bs-toggle="tab-accordion"] [data-bs-toggle="tab"]').on("shown.bs.tab", function (t) {
        var i = e(t.target),
            a = e(t.relatedTarget),
            n = e(this).closest('[data-bs-toggle="tab-accordion"]'),
            s = n.find(i.data("bs-target")),
            o = n.find(a.data("bs-target"));
        s.find(".collapse").addClass("show"), o.find(".collapse").removeClass("show"), s.find('[data-bs-toggle="collapse"]').removeClass("collapsed"), o.find('[data-bs-toggle="collapse"]').addClass("collapsed");
      }), e('[data-bs-toggle="tab-accordion"] .collapse').on("shown.bs.collapse", function (i) {
        var t,
            n,
            o,
            s = e(i.target).closest(".tab-pane");
        s.length && (t = e('[data-bs-target="#' + s.attr("id") + '"]'), t.length && (n = t.closest(".nav-tabs"), n.length && (n.find('[data-bs-toggle="tab"]').removeClass("active"), o = n.next(".tab-content"), o.length && o.find(".tab-pane").removeClass("show active"), s.addClass("show active"), t.addClass("active"))));
      });
    },
    tab_dropdown: function () {
      e('[data-bs-toggle="tab-dropdown"] [data-bs-toggle="tab"]').on("shown.bs.tab", function (n) {
        var s = e(n.target),
            i = e(n.relatedTarget),
            t = e(this).closest('[data-bs-toggle="tab-dropdown"]'),
            o = s.data("bs-target");
        t.find('[data-bs-toggle="tab"]').removeClass("active"), t.find('[data-bs-target="' + o + '"]').addClass("active"), t.find('[data-bs-toggle="dropdown"]').text(s.text());
      });
    }
  }, e(document).ready(function () {
    APP.tabs.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.docSearch = {
    isFirstRun: !0,
    fuse: null,
    docData: [],
    preTerm: null,
    init: function () {
      this.eventHandler();
    },
    eventHandler: function () {
      e(".doc-search-button").on("click", function () {
        APP.docSearch.isFirstRun && (APP.docSearch.loadDocSearch(), APP.docSearch.isFirstRun = !1), APP.docSearch.openDocSearch();
      }), e(document).on("keydown", function (t) {
        if (t.ctrlKey && t.keyCode === 191 && e(".doc-search-button").trigger("click"), a = e("#doc-search-modal-container"), !a.hasClass("visually-hidden")) {
          var o,
              i,
              a,
              s = e(".doc-search-result-list"),
              n = s.find("li.active");
          t.keyCode === 27 && a.addClass("visually-hidden"), s.is(":visible") && (t.keyCode === 38 && (o = n.prev(), o.length === 0 && (o = s.find("li:last")), n.removeClass("active"), o.addClass("active"), t.preventDefault()), t.keyCode === 40 && (i = n.next(), i.length === 0 && (i = s.find("li:first")), n.removeClass("active"), i.addClass("active"), t.preventDefault()), t.keyCode === 13 && (n.length > 0 && (window.location.href = n.find("a").attr("href")), t.preventDefault()));
        }
      });
      var t = e("#docsearch-input");
      t.on("keyup", function () {
        APP.docSearch.excuteSearch(this.value);
      }), t.on("change", function () {
        APP.docSearch.excuteSearch(this.value);
      }), e("#doc-search-modal-container").on("click", function (t) {
        e(t.target).closest(".doc-search-modal").length === 0 && e("#doc-search-modal-container").addClass("visually-hidden");
      });
    },
    getDocPath: function () {
      var e = window.location.href.split("/");
      return e.pop(), e.pop(), e.pop(), e.join("/");
    },
    excuteSearch: function (t) {
      var s,
          a,
          r,
          c,
          n = e(".doc-search-result-list"),
          o = e(".doc-search-no-result"),
          i = e(".doc-search-start-screen");
      if (APP.docSearch.fuse === null) return;
      if (t = t.trim(), t === '') i.show(), n.hide(), o.hide();else if (APP.docSearch.preTerm !== t) {
        i.hide();
        let l = APP.docSearch.fuse.search(t);
        if (l.length === 0) n.hide(), o.show(), e(".doc-search-result-message > span").text(t);else {
          n.find("ul").html(''), a = APP.docSearch.getDocPath();

          for (s in l.slice(0, 10)) r = a + l[s].item.permalink, c = l[s].item.description ? "<p>" + l[s].item.description + "</p>" : '', n.find("ul").append('<li class=""><a href="' + r + '"><span></span><div><h6>' + l[s].item.title + "</h6>" + c + "</div></a></li>");

          n.find("a > span").append('<svg viewBox="0 0 20 20"><path d="M17 6v12c0 .52-.2 1-1 1H4c-.7 0-1-.33-1-1V2c0-.55.42-1 1-1h8l5 5zM14 8h-3.13c-.51 0-.87-.34-.87-.87V4" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linejoin="round"></path></svg>'), n.show(), n.find("li").first().addClass("active"), o.hide(), e(".doc-search-result-list li").mouseenter(function () {
            e(".doc-search-result-list li").removeClass("active"), e(this).addClass("active");
          });
        }
      }
      APP.docSearch.preTerm = t;
    },
    loadDocSearch: function () {
      e.ajax({
        url: APP.docSearch.getDocPath() + "/index.json",
        dataType: "json",
        success: function (e) {
          APP.docSearch.docData = e, APP.docSearch.fuse = new Fuse(e, {
            minMatchCharLength: 1,
            location: 0,
            threshold: .1,
            fieldNormWeight: 1,
            distance: 1e4,
            findAllMatches: !0,
            keys: ["title", "description", "contents"]
          });
        }
      });
    },
    openDocSearch: function () {
      var t = e("#doc-search-modal-container");
      if (t.length === 0) return;
      t.toggleClass("visually-hidden"), t.find("#docsearch-input").focus();
    }
  }, e(document).ready(function () {
    APP.docSearch.init();
  });
}(jQuery), APP = APP || {}, function (e) {
  'use strict';

  APP.documentation = {
    init: function () {
      this.docToc(), this.docAnchorLink(), this.docSidebar();
    },
    docToc: function () {
      e.fn.toc && e("#docs-toc").toc({
        content: ".doc-content"
      });
    },
    docAnchorLink: function () {
      if (e("#docs-toc a").each(function () {
        var n = e(this),
            t = n.attr("href");
        e(t).append('<a class="anchor-link" href="' + t + '"></a>');
      }), e(".doc-content").length > 0) try {
        var t = location.hash;
        t && e(t).length > 0 && e(t)[0].scrollIntoView();
      } catch (_unused) {}
    },
    docSidebar: function () {
      var t = e("header.bd-navbar"),
          n = t.outerHeight();
      e(".doc-sidebar").css("--header-height", n + "px");
    }
  }, e(document).ready(function () {
    APP.documentation.init();
  });
}(jQuery);
